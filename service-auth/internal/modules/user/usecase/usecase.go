// Code generated by candi v1.16.3.

package usecase

import (
	"context"
	"crypto/rsa"
	"crypto/sha1"
	"io"

	"service-auth/internal/modules/user/domain"
	"service-auth/pkg/helper"
	shareddomain "service-auth/pkg/shared/domain"
	"service-auth/pkg/shared/repository"
	"service-auth/pkg/shared/service"
	"service-auth/pkg/shared/usecase/common"

	"service-auth/pkg/shared"

	"github.com/golang-jwt/jwt"
	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// UserUsecase abstraction
type UserUsecase interface {
	GetAllUser(ctx context.Context, filter *domain.FilterUser) (data []domain.DetailUserResponse, meta candishared.Meta, err error)
	CreateAdmin(ctx context.Context, data *domain.AddAdminPayload) (err error)

	RegisterUser(ctx context.Context, payload *domain.RegisterPayload) (err error)
	Login(ctx context.Context, payload *domain.LoginPayload) (resp domain.LoginResponse, err error)
	GetDetailUser(ctx context.Context, id int) (data domain.DetailUserResponse, err error)
	UpdateUser(ctx context.Context, data *domain.UpdateUserPayload) (err error)
	GetListSector(ctx context.Context) (data []shareddomain.Sector, err error)

	ValidateToken(ctx context.Context, token string) (*candishared.TokenClaim, error)
	VerifyRegister(ctx context.Context, token string) (err error)
	ResendVerifyEmail(ctx context.Context, req domain.ResendVerifyEmailRequet) (err error)

	Upload(ctx context.Context, req *domain.UploadRequest, file io.Reader) (resp domain.UploadResponse, err error)
	ForgotPassword(ctx context.Context, req domain.ForgotPasswordRequet) (err error)
	UpdatePassword(ctx context.Context, req domain.UpdatePasswordRequest) (err error)
}

type userUsecaseImpl struct {
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	publisher     map[types.Worker]interfaces.Publisher

	passHasher    helper.PasswordHasher
	rsaPrivateKey *rsa.PrivateKey
	rsaPublicKey  *rsa.PublicKey
	jwtParser     shared.JWTParser
	service       *service.Service
	aesCrypto     shared.AESGcm
}

// NewUserUsecase usecase impl constructor
func NewUserUsecase(deps dependency.Dependency) (UserUsecase, func(sharedUsecase common.Usecase)) {
	uc := &userUsecaseImpl{
		repoSQL:       repository.GetSharedRepoSQL(),
		publisher:     make(map[types.Worker]interfaces.Publisher),
		passHasher:    helper.NewPasswordHasher(sha1.New, 8, 32, 15000),
		jwtParser:     &jwt.Parser{},
		aesCrypto:     deps.GetExtended(shared.TypeAESCrypto).(shared.AESGcm),
		rsaPrivateKey: deps.GetKey().PrivateKey(),
		rsaPublicKey:  deps.GetKey().PublicKey(),
		service:       deps.GetExtended(service.ServiceType).(*service.Service),
	}
	if kafkaBroker := deps.GetBroker(types.Kafka); kafkaBroker != nil {
		uc.publisher[types.Kafka] = kafkaBroker.GetPublisher()
	}

	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
