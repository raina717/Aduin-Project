// Code generated by candi v1.16.3.

package resthandler

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strconv"

	"service-auth/internal/modules/user/domain"
	"service-auth/pkg/shared/usecase"

	restserver "github.com/golangid/candi/codebase/app/rest_server"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
	"github.com/golangid/candi/wrapper"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(uc usecase.Usecase, deps dependency.Dependency) *RestHandler {
	return &RestHandler{
		uc: uc, mw: deps.GetMiddleware(), validator: deps.GetValidator(),
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root interfaces.RESTRouter) {

	v1User := root.Group(candihelper.V1 + "/user")
	bearerMiddleware := h.mw.HTTPBearerAuth

	// v1User.GET("/", h.getAllUser, h.mw.HTTPPermissionACL("getAllUser"))

	v1User.POST("/register", h.registerUser, h.mw.HTTPBasicAuth)
	v1User.POST("/verify-email", h.verifyEmail, h.mw.HTTPBasicAuth)
	v1User.POST("/resend-verify-email", h.resendVerifyEmail, h.mw.HTTPBasicAuth)
	v1User.POST("/login", h.login, h.mw.HTTPBasicAuth)
	v1User.GET("/profile", h.getProfile, bearerMiddleware)
	v1User.POST("/profile", h.updateUser, bearerMiddleware)
	v1User.POST("/forgot-password", h.forgotPassword, h.mw.HTTPBasicAuth)
	v1User.POST("/update-password", h.updatePassword, h.mw.HTTPBasicAuth)

	// v1User.GET("/admin", h.getListAdmin, bearerMiddleware)
	v1User.GET("/list-user", h.getAllUser, bearerMiddleware)
	v1User.GET("/detail/admin/:id", h.getDetailUserByID, bearerMiddleware)
	v1User.POST("/admin", h.createAdmin, bearerMiddleware)
	v1User.PUT("/admin", h.updateAdmin, bearerMiddleware)

	v1User.GET("/list-komisi", h.getListSector, h.mw.HTTPBasicAuth)

	storage := root.Group("/storage")
	storage.POST("/upload", h.upload, h.mw.HTTPBearerAuth)
	storage.GET("/profile/:filename", h.getStorage)
}

func (h *RestHandler) getProfile(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:getProfile")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx)
	data, err := h.uc.User().GetDetailUser(ctx, candihelper.ToInt(tokenClaim.Subject))
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success", data).JSON(rw)
}

func (h *RestHandler) getDetailUserByID(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:getProfile")
	defer trace.Finish()

	id, _ := strconv.Atoi(restserver.URLParam(req, "id"))

	data, err := h.uc.User().GetDetailUser(ctx, id)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success", data).JSON(rw)
}

func (h *RestHandler) updateUser(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:UpdateUser")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("user/update_user", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.UpdateUserPayload
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx)

	payload.SectorID = 0
	payload.UserID = candihelper.ToInt(tokenClaim.Subject)
	err := h.uc.User().UpdateUser(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(rw)
}

func (h *RestHandler) registerUser(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:registerUser")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("user/register", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.RegisterPayload
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	err := h.uc.User().RegisterUser(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Register Success").JSON(rw)
}

func (h *RestHandler) login(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:login")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("user/login", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.LoginPayload
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	resp, err := h.uc.User().Login(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Login Success", resp).JSON(rw)
}

func (h *RestHandler) upload(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "ComplaintDeliveryREST:upload")
	defer trace.Finish()

	fileForm, fileHeader, err := req.FormFile("file")
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	payload := domain.UploadRequest{
		Filename: fileHeader.Filename,
		FileSize: fileHeader.Size,

		ContentType: fileHeader.Header.Get("Content-Type"),
	}

	payload.UserID, _ = strconv.Atoi(req.FormValue("user_id"))

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx)
	payload.UserID, _ = strconv.Atoi(tokenClaim.Subject)

	resp, err := h.uc.User().Upload(ctx, &payload, fileForm)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Success", resp).JSON(rw)
}

func (h *RestHandler) getStorage(rw http.ResponseWriter, req *http.Request) {
	trace, _ := tracer.StartTraceWithContext(req.Context(), "ComplaintDeliveryREST:getEvidence")
	defer trace.Finish()

	filename := restserver.URLParam(req, "filename")

	dir, err := os.Getwd()
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	file, err := os.Open(filepath.Join(dir, "storage/profile", filename))
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	defer file.Close()

	contentDisposition := fmt.Sprintf("attachment; filename=%s", filename)
	rw.Header().Set("Content-Disposition", contentDisposition)

	if _, err := io.Copy(rw, file); err != nil {
		wrapper.NewHTTPResponse(http.StatusInternalServerError, err.Error()).JSON(rw)
		return
	}

}

func (h *RestHandler) forgotPassword(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:forgotPassword")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	// if err := h.validator.ValidateDocument("user/update_user", body); err != nil {
	// 	wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
	// 	return
	// }

	var payload domain.ForgotPasswordRequet
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	err := h.uc.User().ForgotPassword(ctx, payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(rw)
}

func (h *RestHandler) verifyEmail(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:verifyEmail")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	// if err := h.validator.ValidateDocument("user/update_user", body); err != nil {
	// 	wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
	// 	return
	// }

	var payload domain.VerifyEmailRequest
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	err := h.uc.User().VerifyRegister(ctx, payload.Token)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(rw)
}

func (h *RestHandler) updatePassword(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:updatePassword")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	// if err := h.validator.ValidateDocument("user/update_user", body); err != nil {
	// 	wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
	// 	return
	// }

	var payload domain.UpdatePasswordRequest
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	err := h.uc.User().UpdatePassword(ctx, payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(rw)
}

func (h *RestHandler) getListSector(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:getListSector")
	defer trace.Finish()

	data, err := h.uc.User().GetListSector(ctx)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	message := "Success"
	wrapper.NewHTTPResponse(http.StatusOK, message, data).JSON(rw)
}

func (h *RestHandler) resendVerifyEmail(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "UserDeliveryREST:resendVerifyEmail")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	// if err := h.validator.ValidateDocument("user/update_user", body); err != nil {
	// 	wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
	// 	return
	// }

	var payload domain.ResendVerifyEmailRequet
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	err := h.uc.User().ResendVerifyEmail(ctx, payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(rw)
}
