// Code generated by candi v1.16.3.

package usecase

import (
	"context"

	"service-auth/internal/modules/notification/domain"
	shareddomain "service-auth/pkg/shared/domain"
	"service-auth/pkg/shared/repository"
	"service-auth/pkg/shared/usecase/common"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// NotificationUsecase abstraction
type NotificationUsecase interface {
	GetAllNotification(ctx context.Context, filter domain.FilterNotification) (data []shareddomain.Notification, meta candishared.Meta, err error)
	CreateNotification(ctx context.Context, data *domain.RequestNotification) (err error)
	PutNotification(ctx context.Context, req *domain.RequestPutNotification) (err error)
}

type notificationUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	locker        interfaces.Locker
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
	publisher map[types.Worker]interfaces.Publisher
}

// NewNotificationUsecase usecase impl constructor
func NewNotificationUsecase(deps dependency.Dependency) (NotificationUsecase, func(sharedUsecase common.Usecase)) {
	uc := &notificationUsecaseImpl{
		repoSQL: repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),
		locker:    deps.GetLocker(),
		publisher: make(map[types.Worker]interfaces.Publisher),
	}
	if redisPool := deps.GetRedisPool(); redisPool != nil {
		uc.cache = redisPool.Cache()
	}
	if kafkaBroker := deps.GetBroker(types.Kafka); kafkaBroker != nil {
		uc.publisher[types.Kafka] = kafkaBroker.GetPublisher()
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
