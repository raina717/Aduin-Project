// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	candishared "github.com/golangid/candi/candishared"

	domain "service-auth/internal/modules/user/domain"

	mock "github.com/stretchr/testify/mock"

	shareddomain "service-auth/pkg/shared/domain"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, filter
func (_m *UserRepository) Count(ctx context.Context, filter *domain.FilterUser) int {
	ret := _m.Called(ctx, filter)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterUser) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, filter
func (_m *UserRepository) Delete(ctx context.Context, filter *domain.FilterUser) error {
	ret := _m.Called(ctx, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterUser) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx, filter
func (_m *UserRepository) FetchAll(ctx context.Context, filter *domain.FilterUser) ([]shareddomain.User, error) {
	ret := _m.Called(ctx, filter)

	var r0 []shareddomain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterUser) ([]shareddomain.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterUser) []shareddomain.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shareddomain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.FilterUser) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filter
func (_m *UserRepository) Find(ctx context.Context, filter *domain.FilterUser) (shareddomain.User, error) {
	ret := _m.Called(ctx, filter)

	var r0 shareddomain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterUser) (shareddomain.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterUser) shareddomain.User); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(shareddomain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.FilterUser) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, data, updateOptions
func (_m *UserRepository) Save(ctx context.Context, data *shareddomain.User, updateOptions ...candishared.DBUpdateOptionFunc) error {
	_va := make([]interface{}, len(updateOptions))
	for _i := range updateOptions {
		_va[_i] = updateOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shareddomain.User, ...candishared.DBUpdateOptionFunc) error); ok {
		r0 = rf(ctx, data, updateOptions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
