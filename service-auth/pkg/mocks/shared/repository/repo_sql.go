// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "service-auth/internal/modules/user/repository"

	mock "github.com/stretchr/testify/mock"
)

// RepoSQL is an autogenerated mock type for the RepoSQL type
type RepoSQL struct {
	mock.Mock
}

// UserRepo provides a mock function with given fields:
func (_m *RepoSQL) UserRepo() repository.UserRepository {
	ret := _m.Called()

	var r0 repository.UserRepository
	if rf, ok := ret.Get(0).(func() repository.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserRepository)
		}
	}

	return r0
}

// WithTransaction provides a mock function with given fields: ctx, txFunc
func (_m *RepoSQL) WithTransaction(ctx context.Context, txFunc func(context.Context) error) error {
	ret := _m.Called(ctx, txFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepoSQL creates a new instance of RepoSQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoSQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoSQL {
	mock := &RepoSQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
