// Code generated by candi v1.16.3.

package usecase

import (
	"context"
	"io"
	"service-complaint/pkg/shared/service"

	"service-complaint/internal/modules/complaint/domain"
	shareddomain "service-complaint/pkg/shared/domain"
	"service-complaint/pkg/shared/repository"
	"service-complaint/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// ComplaintUsecase abstraction
type ComplaintUsecase interface {
	CreateComplaint(ctx context.Context, data *domain.AddComplaint) (err error)
	AddResponse(ctx context.Context, data *domain.AddComplaintResponse) (err error)
	AddComment(ctx context.Context, data *domain.AddComment) (err error)
	PutLike(ctx context.Context, data *domain.PutLike) (err error)
	IncrementShare(ctx context.Context, id int) (err error)
	GetDetailComplaint(ctx context.Context, payload domain.GetDetailComplaint) (data domain.ResponseDetailComplaint, err error)
	GetAllComplaint(ctx context.Context, filter domain.FilterComplaint) (data []domain.ResponseDetailComplaint, meta domain.GetAllComplaintMeta, err error)
	GetCategories(ctx context.Context) (data []shareddomain.Category, err error)
	UpdateComplaint(ctx context.Context, payload *domain.UpdateComplaint) (err error)

	DeleteComplaint(ctx context.Context, id int) (err error)
	WorkerCloseComplaint(ctx context.Context) (err error)

	Upload(ctx context.Context, req *domain.UploadRequest, file io.Reader) (resp domain.UploadResponse, err error)
}

type complaintUsecaseImpl struct {
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	publisher     map[types.Worker]interfaces.Publisher
	service       *service.Service
}

// NewComplaintUsecase usecase impl constructor
func NewComplaintUsecase(deps dependency.Dependency) (ComplaintUsecase, func(sharedUsecase common.Usecase)) {
	uc := &complaintUsecaseImpl{
		repoSQL:   repository.GetSharedRepoSQL(),
		publisher: make(map[types.Worker]interfaces.Publisher),
		service:   deps.GetExtended(service.ServiceType).(*service.Service),
	}
	if kafkaBroker := deps.GetBroker(types.Kafka); kafkaBroker != nil {
		uc.publisher[types.Kafka] = kafkaBroker.GetPublisher()
	}

	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
